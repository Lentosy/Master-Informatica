//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BadmintonServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SportClub", Namespace="http://schemas.datacontract.org/2004/07/BadmintonServiceLibrary")]
    public partial class SportClub : object
    {
        
        private int IDField;
        
        private string NaamField;
        
        private BadmintonServiceReference.Tornooi[] TornooienField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naam
        {
            get
            {
                return this.NaamField;
            }
            set
            {
                this.NaamField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BadmintonServiceReference.Tornooi[] Tornooien
        {
            get
            {
                return this.TornooienField;
            }
            set
            {
                this.TornooienField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tornooi", Namespace="http://schemas.datacontract.org/2004/07/BadmintonServiceLibrary")]
    public partial class Tornooi : object
    {
        
        private int IDField;
        
        private string NaamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naam
        {
            get
            {
                return this.NaamField;
            }
            set
            {
                this.NaamField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lid", Namespace="http://schemas.datacontract.org/2004/07/BadmintonServiceLibrary")]
    public partial class Lid : object
    {
        
        private int IDField;
        
        private string NaamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naam
        {
            get
            {
                return this.NaamField;
            }
            set
            {
                this.NaamField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BadmintonServiceReference.IBadmintonService")]
    public interface IBadmintonService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBadmintonService/GetSportClubs", ReplyAction="http://tempuri.org/IBadmintonService/GetSportClubsResponse")]
        System.Threading.Tasks.Task<BadmintonServiceReference.SportClub[]> GetSportClubsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBadmintonService/GetLeden", ReplyAction="http://tempuri.org/IBadmintonService/GetLedenResponse")]
        System.Threading.Tasks.Task<BadmintonServiceReference.Lid[]> GetLedenAsync(int sportclubID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public interface IBadmintonServiceChannel : BadmintonServiceReference.IBadmintonService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.5.0.0")]
    public partial class BadmintonServiceClient : System.ServiceModel.ClientBase<BadmintonServiceReference.IBadmintonService>, BadmintonServiceReference.IBadmintonService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BadmintonServiceClient() : 
                base(BadmintonServiceClient.GetDefaultBinding(), BadmintonServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IBadmintonService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BadmintonServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BadmintonServiceClient.GetBindingForEndpoint(endpointConfiguration), BadmintonServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BadmintonServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BadmintonServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BadmintonServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BadmintonServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BadmintonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<BadmintonServiceReference.SportClub[]> GetSportClubsAsync()
        {
            return base.Channel.GetSportClubsAsync();
        }
        
        public System.Threading.Tasks.Task<BadmintonServiceReference.Lid[]> GetLedenAsync(int sportclubID)
        {
            return base.Channel.GetLedenAsync(sportclubID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBadmintonService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBadmintonService))
            {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:48732/BadmintonServer/BadmintonService/"), new System.ServiceModel.DnsEndpointIdentity("localhost"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BadmintonServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IBadmintonService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BadmintonServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IBadmintonService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IBadmintonService,
        }
    }
}
