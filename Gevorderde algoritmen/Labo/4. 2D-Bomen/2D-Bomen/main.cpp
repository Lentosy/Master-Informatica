#include "Tree2D.h"
#include "Point.h"

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <assert.h>

void testTree() {
	std::vector<int> xValues = { 3, 17, 13, 6, 9, 2, 10 };
	std::vector<int> yValues = { 6, 15, 15, 12, 1, 7, 19 };

	Tree2D tree;
	for (int i = 0; i < xValues.size(); i++) {
		tree.add(Point(xValues[i], yValues[i]));
	}

	tree.print(std::cout);
}

void testNearestSearch(Tree2D& tree) {
	// resultaten van de testgevallen zoals op intranet gegeven
	std::vector<Point> pointsToFind = {
			Point(2, 0),
			Point(0, 11),
			Point(0, 20),
			Point(0, 29),
			Point(1, 40),
			Point(0, 51),
			Point(0, 61),
			Point(0, 71),
			Point(0, 80),
			Point(0, 90),
			Point(0, 100),
			Point(0, 111),
			Point(0, 120),
			Point(0, 130),
			Point(0, 140),
			Point(0, 150),
			Point(0, 160),
			Point(1, 172),
			Point(0, 180),
			Point(0, 190),
			Point(10, 0),
			Point(10, 11),
			Point(10, 20),
			Point(10, 29),
			Point(10, 40),
			Point(10, 50),
			Point(10, 60),
			Point(10, 71),
			Point(10, 80),
			Point(10, 90),
			Point(9, 100),
			Point(10, 111),
			Point(9, 120),
			Point(9, 130),
			Point(10, 141),
			Point(10, 150),
			Point(10, 159),
			Point(10, 170),
			Point(10, 179),
			Point(9, 189),
			Point(20, 0),
			Point(19, 10),
			Point(20, 21),
			Point(21, 30),
			Point(20, 41),
			Point(19, 50),
			Point(20, 60),
			Point(20, 71),
			Point(20, 80),
			Point(20, 90),
			Point(20, 100),
			Point(20, 109),
			Point(20, 119),
			Point(20, 130),
			Point(20, 140),
			Point(20, 149),
			Point(20, 160),
			Point(21, 170),
			Point(21, 180),
			Point(20, 190),
			Point(29, 1),
			Point(31, 10),
			Point(30, 20),
			Point(31, 29),
			Point(30, 40),
			Point(29, 50),
			Point(30, 60),
			Point(30, 70),
			Point(30, 80),
			Point(30, 91),
			Point(30, 100),
			Point(30, 111),
			Point(30, 120),
			Point(30, 130),
			Point(30, 140),
			Point(30, 149),
			Point(30, 161),
			Point(30, 169),
			Point(30, 180),
			Point(30, 191),
			Point(40, 1),
			Point(40, 10),
			Point(40, 19),
			Point(40, 30),
			Point(40, 40),
			Point(40, 50),
			Point(40, 60),
			Point(40, 70),
			Point(40, 80),
			Point(40, 90),
			Point(40, 100),
			Point(40, 109),
			Point(40, 120),
			Point(40, 130),
			Point(40, 140),
			Point(41, 150),
			Point(40, 160),
			Point(40, 171),
			Point(40, 179),
			Point(40, 189),
			Point(49, 0),
			Point(50, 11),
			Point(51, 20),
			Point(50, 30),
			Point(51, 39),
			Point(49, 50),
			Point(51, 60),
			Point(49, 70),
			Point(50, 79),
			Point(50, 89),
			Point(50, 100),
			Point(50, 110),
			Point(50, 119),
			Point(50, 129),
			Point(49, 140),
			Point(50, 150),
			Point(50, 160),
			Point(50, 169),
			Point(50, 179),
			Point(51, 190),
			Point(60, 0),
			Point(60, 10),
			Point(59, 20),
			Point(60, 30),
			Point(60, 40),
			Point(60, 50),
			Point(60, 61),
			Point(60, 70),
			Point(60, 80),
			Point(60, 89),
			Point(59, 100),
			Point(60, 110),
			Point(59, 119),
			Point(60, 130),
			Point(60, 140),
			Point(60, 151),
			Point(60, 160),
			Point(60, 170),
			Point(61, 180),
			Point(60, 190),
			Point(71, 1),
			Point(71, 10),
			Point(69, 20),
			Point(70, 30),
			Point(70, 39),
			Point(70, 50),
			Point(70, 59),
			Point(70, 71),
			Point(70, 80),
			Point(70, 90),
			Point(70, 99),
			Point(70, 110),
			Point(69, 120),
			Point(69, 130),
			Point(70, 140),
			Point(70, 150),
			Point(70, 159),
			Point(70, 169),
			Point(70, 180),
			Point(70, 190),
			Point(78, 0),
			Point(79, 10),
			Point(80, 20),
			Point(80, 29),
			Point(80, 41),
			Point(80, 51),
			Point(80, 59),
			Point(80, 71),
			Point(80, 80),
			Point(80, 90),
			Point(80, 99),
			Point(80, 110),
			Point(80, 119),
			Point(80, 129),
			Point(81, 140),
			Point(80, 150),
			Point(81, 160),
			Point(80, 170),
			Point(80, 181),
			Point(80, 190),
			Point(90, 0),
			Point(90, 10),
			Point(89, 20),
			Point(91, 30),
			Point(91, 40),
			Point(90, 50),
			Point(90, 60),
			Point(90, 71),
			Point(90, 79),
			Point(90, 91),
			Point(90, 99),
			Point(90, 110),
			Point(90, 122),
			Point(91, 130),
			Point(90, 140),
			Point(89, 150),
			Point(89, 160),
			Point(90, 171),
			Point(90, 180),
			Point(89, 191),
			Point(100, 0),
			Point(99, 10),
			Point(100, 20),
			Point(100, 30),
			Point(100, 41),
			Point(100, 49),
			Point(100, 60),
			Point(100, 71),
			Point(100, 81),
			Point(100, 90),
			Point(101, 100),
			Point(100, 110),
			Point(101, 120),
			Point(100, 129),
			Point(100, 140),
			Point(99, 150),
			Point(100, 159),
			Point(100, 170),
			Point(100, 180),
			Point(101, 190),
			Point(110, 0),
			Point(110, 11),
			Point(109, 20),
			Point(110, 29),
			Point(110, 40),
			Point(110, 50),
			Point(110, 60),
			Point(109, 69),
			Point(110, 79),
			Point(110, 90),
			Point(110, 101),
			Point(110, 109),
			Point(110, 121),
			Point(110, 130),
			Point(109, 140),
			Point(110, 150),
			Point(110, 160),
			Point(110, 170),
			Point(111, 179),
			Point(111, 190),
			Point(120, 2),
			Point(119, 10),
			Point(120, 20),
			Point(120, 30),
			Point(120, 40),
			Point(120, 51),
			Point(120, 60),
			Point(122, 70),
			Point(120, 80),
			Point(120, 90),
			Point(121, 100),
			Point(121, 110),
			Point(120, 119),
			Point(120, 130),
			Point(120, 140),
			Point(120, 150),
			Point(120, 159),
			Point(120, 169),
			Point(120, 180),
			Point(120, 180),
			Point(130, 0),
			Point(131, 10),
			Point(130, 20),
			Point(131, 29),
			Point(130, 40),
			Point(130, 51),
			Point(129, 60),
			Point(129, 70),
			Point(129, 80),
			Point(130, 89),
			Point(130, 100),
			Point(130, 110),
			Point(129, 120),
			Point(130, 130),
			Point(130, 141),
			Point(130, 150),
			Point(130, 160),
			Point(130, 170),
			Point(130, 180),
			Point(130, 191),
			Point(140, 0),
			Point(140, 9),
			Point(140, 19),
			Point(140, 29),
			Point(140, 40),
			Point(139, 50),
			Point(140, 60),
			Point(141, 70),
			Point(140, 79),
			Point(140, 90),
			Point(140, 101),
			Point(140, 110),
			Point(140, 120),
			Point(140, 130),
			Point(140, 140),
			Point(140, 150),
			Point(140, 159),
			Point(140, 169),
			Point(140, 180),
			Point(140, 191),
			Point(151, 0),
			Point(150, 10),
			Point(150, 21),
			Point(150, 31),
			Point(150, 40),
			Point(150, 50),
			Point(150, 59),
			Point(150, 70),
			Point(150, 81),
			Point(150, 90),
			Point(149, 100),
			Point(150, 109),
			Point(151, 120),
			Point(150, 129),
			Point(150, 141),
			Point(149, 150),
			Point(150, 160),
			Point(150, 171),
			Point(150, 179),
			Point(150, 190),
			Point(160, 0),
			Point(160, 10),
			Point(160, 19),
			Point(159, 30),
			Point(160, 40),
			Point(159, 50),
			Point(160, 60),
			Point(160, 70),
			Point(160, 80),
			Point(160, 91),
			Point(159, 101),
			Point(159, 111),
			Point(160, 121),
			Point(160, 130),
			Point(160, 140),
			Point(159, 150),
			Point(160, 160),
			Point(160, 170),
			Point(160, 180),
			Point(160, 190),
			Point(170, 0),
			Point(171, 10),
			Point(170, 20),
			Point(169, 31),
			Point(170, 41),
			Point(170, 51),
			Point(170, 60),
			Point(170, 69),
			Point(170, 80),
			Point(171, 91),
			Point(170, 100),
			Point(170, 111),
			Point(170, 120),
			Point(170, 130),
			Point(170, 140),
			Point(170, 151),
			Point(170, 160),
			Point(171, 170),
			Point(169, 180),
			Point(170, 189),
			Point(181, 0),
			Point(180, 10),
			Point(180, 20),
			Point(180, 30),
			Point(180, 40),
			Point(180, 50),
			Point(180, 59),
			Point(180, 70),
			Point(179, 80),
			Point(180, 90),
			Point(180, 100),
			Point(179, 110),
			Point(179, 120),
			Point(179, 129),
			Point(180, 140),
			Point(180, 150),
			Point(180, 160),
			Point(181, 170),
			Point(181, 180),
			Point(179, 191),
			Point(190, 0),
			Point(190, 10),
			Point(190, 20),
			Point(190, 30),
			Point(191, 41),
			Point(190, 50),
			Point(190, 59),
			Point(190, 69),
			Point(190, 80),
			Point(190, 90),
			Point(191, 100),
			Point(190, 111),
			Point(190, 120),
			Point(190, 130),
			Point(190, 139),
			Point(190, 150),
			Point(191, 160),
			Point(190, 170),
			Point(191, 180),
			Point(191, 190),
	};
	std::vector<int> visitedNodes = { 82,80,78,89,68,76,56,74,61,80,70,79,74,84,85,79,95,95,93,69,64,99,104,141,105,97,86,80,57,63,107,122,124,103,110,103,108,92,102,97,57,96,113,119,108,99,70,87,97,108,108,124,130,107,104,120,99,126,115,115,56,56,72,109,109,80,63,60,84,91,110,120,100,106,105,109,119,116,110,118,62,72,96,80,87,80,40,67,81,88,117,114,68,96,90,110,131,140,149,134,69,99,100,94,91,84,84,87,95,100,92,77,95,105,118,100,104,137,153,140,58,69,57,69,53,50,66,84,80,104,112,90,109,88,93,111,112,104,98,101,55,59,88,42,54,65,78,72,71,110,122,126,111,84,97,100,121,117,110,122,81,93,67,77,86,89,67,61,86,78,111,113,94,89,89,102,77,111,144,131,53,71,123,122,115,92,106,119,134,114,120,107,124,113,75,76,96,115,108,110,64,73,75,72,121,115,108,127,113,108,136,103,129,95,100,116,127,105,116,123,57,97,76,103,120,125,115,147,146,109,96,96,100,74,107,81,104,104,123,127,78,110,77,108,103,140,98,167,143,90,107,121,130,103,78,87,147,138,97,114,60,121,119,162,128,149,146,143,151,163,133,147,123,105,90,77,102,69,56,102,62,118,142,160,146,168,143,166,166,137,167,139,106,109,106,111,95,106,67,118,71,80,132,151,133,128,148,121,154,143,154,149,142,111,134,150,122,141,138,104,53,94,177,183,139,167,150,154,156,208,193,147,126,112,138,144,161,129,140,103,43,136,124,153,154,149,135,170,134,167,131,144,120,116,122,146,131,154,146,145,71,109,145,169,164,165,170,170,187,176,165,149,168,173,136,164,155,173,153,190,62,96,153,160,200,174,199,224,161,188,181,179,164,156,206,184,163,152,179,192 };
	int testIndex = 0;

	std::cout << "searchPoint foundPoint   pointToFind\n";
	for (int i = 0; i < 200; i += 10) {
		for (int j = 0; j < 200; j += 10) {
			int amountVisited = 0;
			Point searchPoint = Point(i, j);
			Point foundPoint = tree.nearestNeighbourSearch(searchPoint, amountVisited);
			if (foundPoint != pointsToFind[testIndex]) {
				std::cout << searchPoint << " : " << foundPoint << " != " << pointsToFind[testIndex] << setw(10) << amountVisited << " should be " << visitedNodes[testIndex] << "\n";
			}
			testIndex++;
		}
	}
}

void tree2DToDot(Tree2D& tree, int maxdepth) {
	tree.draw("2dtree.dot", maxdepth);
	std::string command_dot = "dot -Tpng 2dtree.dot -o 2dtree.png";
	system(command_dot.c_str());
	system("2dtree.png");
}

int main(void) {
	Tree2D tree("puntenverzameling.dat");
	//tree2DToDot(tree, 5);
	testNearestSearch(tree);
	return 0;
}